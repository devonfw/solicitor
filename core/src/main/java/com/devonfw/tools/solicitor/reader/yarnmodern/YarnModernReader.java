/**
 * SPDX-License-Identifier: Apache-2.0
 */

package com.devonfw.tools.solicitor.reader.yarnmodern;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.devonfw.tools.solicitor.common.LogMessages;
import com.devonfw.tools.solicitor.common.PackageURLHelper;
import com.devonfw.tools.solicitor.common.SolicitorRuntimeException;
import com.devonfw.tools.solicitor.model.inventory.ApplicationComponent;
import com.devonfw.tools.solicitor.model.masterdata.Application;
import com.devonfw.tools.solicitor.model.masterdata.UsagePattern;
import com.devonfw.tools.solicitor.reader.AbstractReader;
import com.devonfw.tools.solicitor.reader.Reader;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

/**
 * A {@link Reader} which reads data generated by
 * <a href="https://github.com/mhassan1/yarn-plugin-licenses">yarn-plugin-licenses</a>.
 */

@Component
public class YarnModernReader extends AbstractReader implements Reader {

  private static final Logger LOG = LoggerFactory.getLogger(YarnModernReader.class);

  /**
   * The supported type of this {@link Reader}.
   */
  public static final String SUPPORTED_TYPE = "yarn-modern";

  /** {@inheritDoc} */
  @Override
  public Set<String> getSupportedTypes() {

    return Collections.singleton(SUPPORTED_TYPE);
  }

  /** {@inheritDoc} */
  @SuppressWarnings("rawtypes")
  @Override
  public void readInventory(String type, String sourceUrl, Application application, UsagePattern usagePattern,
      String repoType, String packageType, Map<String, String> configuration) {

    String content = readAndPreprocessJson(sourceUrl);

    int componentCount = 0;
    int licenseCount = 0;

    ObjectMapper mapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);
    List body;
    try {
      body = mapper.readValue(content, List.class);
    } catch (IOException e) {
      throw new SolicitorRuntimeException("Could not read yarn modern inventory source '" + sourceUrl + "'", e);
    }
    for (int i = 0; i < body.size(); i++) {
      Map<String, String> licenseBlock = (Map<String, String>) body.get(i);

      String license = licenseBlock.get("value");
      List<String> locators = new ArrayList<>();

      for (Map.Entry<String, String> entry : licenseBlock.entrySet()) {
        if (entry.getKey().endsWith(".value.locator")) {
          locators.add(entry.getValue());
        }
      }

      for (String locator : locators) {
        int lastAtPosition = locator.lastIndexOf("@");
        String name = locator.substring(0, lastAtPosition);
        String version = locator.substring(lastAtPosition + 1);
        String repo = licenseBlock.get("children." + locator + ".children.url");
        String licenseUrl = defaultGithubLicenseURL(repo);
        String vendorUrl = licenseBlock.get("children." + locator + ".children.vendorUrl");
        String homePage = "";
        if (vendorUrl != null) {
          homePage = vendorUrl;
        }

        ApplicationComponent appComponent = getModelFactory().newApplicationComponent();
        appComponent.setApplication(application);
        componentCount++;
        appComponent.setArtifactId(name);
        appComponent.setVersion(version);
        appComponent.setUsagePattern(usagePattern);
        appComponent.setGroupId("");
        appComponent.setOssHomepage(homePage);
        appComponent.setSourceRepoUrl(repo);
        appComponent.setRepoType(repoType);
        appComponent.setPackageUrl(PackageURLHelper.fromNpmPackageNameAndVersion(name, version));

        addRawLicense(appComponent, license, licenseUrl, sourceUrl);
        licenseCount++;
      }
    }
    doLogging(sourceUrl, application, componentCount, licenseCount);

  }

  // helper method that defaults github-links (html) to a default license path
  private String defaultGithubLicenseURL(String repo) {

    if (repo == null) {
      return null;
    }

    if (repo.contains("github.com") && !repo.contains("/raw/")) {
      repo = repo.replace("git://", "https://");
      repo = repo.replace("github.com", "raw.githubusercontent.com");
      repo = repo.concat("/master/LICENSE");
    }
    return repo;
  }

  // helper method that extracts information from the .json created by yarn
  // licenses into a correct form
  private String readAndPreprocessJson(String sourceURL) {

    String filePath = sourceURL.replaceAll("file:", "");
    File input = new File(filePath);
    String content = "";

    try {
      BufferedReader reader = new BufferedReader(new FileReader(input));
      String line = null;
      StringBuilder sb = new StringBuilder();

      // read in the complete file
      while ((line = reader.readLine()) != null) {
        sb.append(line).append("\n");
      }

      content = sb.toString();

      // patch data of virtual and patched packages to conform to "normal" packages
      String oldContent = content;
      content = content.replaceAll("virtual:.*?#", "");
      if (!content.equals(oldContent)) {
        LOG.warn(LogMessages.MODERN_YARN_VIRTUAL_PACKAGE.msg(), sourceURL);
      }
      oldContent = content;
      content = content.replaceAll("@patch:.*?@npm%3A(.*?)#.*?(.value.|.children.|\")", "@npm:$1$2");
      if (!content.equals(oldContent)) {
        LOG.warn(LogMessages.MODERN_YARN_PATCHED_PACKAGE.msg(), sourceURL);
      }
      content = content.replaceAll("@workspace:\\.", "@none");
      content = content.replace("@npm:", "@");
      // fixes URL issues
      content = content.replace("git+", "");
      content = content.replace("www.github", "github");
      content = content.replace(".git", "");
      content = content.replace("git://", "https://");
      content = content.replace("git@github.com:", "https://github.com/");
      content = content.replace("ssh://git@", "https://");
      content = content.replace("Unknown", "");

      reader.close();

    } catch (IOException e) {
      throw new SolicitorRuntimeException("Could not read yarn inventory source '" + sourceURL + "'", e);
    }
    return content;
  }

}
