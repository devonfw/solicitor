# SPDX-License-Identifier: Apache-2.0


# log own messages from level INFO upwards, all other only if WARN or higher
logging.level.root=WARN
logging.level.com.devonfw.tools.solicitor=INFO
logging.level.com.devonfw.tools.solicitor.SolicitorApplication=WARN
logging.level.org.kie=WARN
logging.level.org.drools=WARN
logging.level.com.zaxxer.hikari.util.DriverDataSource=ERROR
# logging.level.com.devonfw.tools.solicitor.ruleengine.drools.AuditEntryBuilder=DEBUG

logging.file.name=solicitor.log
logging.pattern.console=%clr(%d{${LOG_DATEFORMAT_PATTERN:yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}


# enter filelocation here to enable detailed logging of the drools component
drools-rule-engine.debuglog=

# If set to "true" the download of web content (e.g. license text) via their URL (over the net) will be disabled.
# Use this if you do not have the required network connectivity or want to skip the net access due to other reasons.
webcontent.skipdownload=false

## Properties for package URL based information. Infix (like "maven") corresponds to type.
# Base URL for accessing maven packages
packageurls.maven.repobaseurl=https://repo1.maven.org/maven2/
# Base URL for accessing npm packages
packageurls.npm.repobaseurl=https://registry.npmjs.org/
# Base URL for accessing pypi packages
packageurls.pypi.repobaseurl=https://pypi.io/packages/
# Base URL for accessing nuget packages
packageurls.nuget.repobaseurl=https://www.nuget.org/api/v2/package/

# the URL of the base config file
solicitor.base-config-url=classpath:com/devonfw/tools/solicitor/config/solicitor_base.cfg

# the base paths in the classpath where to search for cached (predefined) license texts
solicitor.classpath-license-cache-locations=licenses

# Deprecated features are deactivated by default. If set to true they might be (temporarily) activated.
solicitor.deprecated-features-allowed=false

# Regular expression filter pattern which needs to be matched for a reporting group to be active. If a reporting
# group does not match this pattern, then no report will be written for this reporting group
# solicitor.reportinggroups.filterpattern=.*

## Feature flags for activation of non-standard/experimental functionality
# Incorporate scancode infos into model
solicitor.feature-flag.scancode=false
# Attempt automatic mapping of scancode license ids to NormalizedLicenses
solicitor.feature-flag.scancode.automapping=true
# comma separated list of regular expressions which define the scancode license ids which will not be automatically mapped
solicitor.scancode.automapping.blacklistpatterns=.*unknown.*,.*proprietary.*
# comma separated list of regular expressions which define the scancode license ids which will be mapped to IGNORE/Ignore
solicitor.scancode.automapping.ignorelistpatterns=

## Parameters for controlling the processing of scancode information
# the name of the file which contains the scancode data
#solicitor.scancode.file-name=scancode.json
# minimum score of detected license findings to be taken into account for Solicitor processing
solicitor.scancode.min-license-score=90.0
# minimum number of lines of detected license text for a file to be possibly taken as license text
solicitor.scancode.min-licensefile-number-of-lines=5
# filename of the curationy.yaml file
solicitor.scancode.curations-filename=output/curations.yaml
# base path of the file repo where sources and scancode information is stored
solicitor.scancode.repo-base-path=output/Source
# list of patterns of found licenses which shall set the dataStatus to WITH_ISSUES
solicitor.scancode.issuelistpatterns=.*unknown.*
# the maximum file size which is processed when retrieving license texts and notice file content
# from the source files of the package. This limit prevents huge memory consumption which might cause possible
# stability problems.
#solicitor.scancode.solicitor.scancode.max-content-file-size=1000000

# The curationDataSelector value to use when accessing curation data.
# You can change its value to select a specific curation data source (if the implementation supports this).
# Set it to "none" to skip applying curations (no curations will be applied).
# Leave it empty to use the default curation data source.
solicitor.curationDataSelector=

# If there is an exception while reading the raw inventory data for an application the processing will be aborted by default.
# By setting this property to true processing will continue in case that the input file is not found. This allows processing
# in multi application projects where some input files are not yet available. A warning (SOLI-045) will be logged in this case and
# Fields releaseId, releaseDate, sourceRepo, programmingEcosystem of the Application object will be filled with string
# "(INPUT DATA MISSING!)" and the name will be suffixed with "(INPUT DATA MISSING!) in this case"
# If using this feature make sure to double check the log files / result to assure data is complete.
solicitor.tolerate-missing-input=false

# Always activate the "extension" profile so that properties in application-extension.properties takes higher precedence
# and might override properties given here
spring.profiles.include=extension

# do not allow  spring to start any webserver - even if the components are included in the classpath
spring.main.web-application-type=none

## Default values of the properties giving information about a possibly active extension
# this will be overriden by definitions given in application-extension.properties in the
# the extension classpath
solicitor.extension-artifact = NONE
solicitor.extension-version = NONE
solicitor.extension-githash = NONE
solicitor.extension-builddate = NONE

# The Solicitor version range that the extension expects
solicitor.extension-expected-solicitor-version-range=

# Two optional text lines to be printed out when the extension is active
solicitor.extension-message-1=
solicitor.extension-message-2=

# source and target location of the optional extension user guide
solicitor.extension-userguide-source=
solicitor.extension-userguide-target=

